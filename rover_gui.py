# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rover.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import serial
import os
import webbrowser
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.mode = 'M'
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1095, 793)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.down = QtWidgets.QPushButton(self.centralwidget)
        self.down.setGeometry(QtCore.QRect(490, 480, 131, 151))
        self.down.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/down.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.down.setIcon(icon)
        self.down.setIconSize(QtCore.QSize(128, 128))
        self.down.setObjectName("down")
        
        self.up = QtWidgets.QPushButton(self.centralwidget)
        self.up.setGeometry(QtCore.QRect(490, 160, 131, 151))
        self.up.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/up.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.up.setIcon(icon1)
        self.up.setIconSize(QtCore.QSize(128, 128))
        self.up.setObjectName("up")
        
        self.left = QtWidgets.QPushButton(self.centralwidget)
        self.left.setGeometry(QtCore.QRect(240, 340, 161, 111))
        self.left.setAutoFillBackground(False)
        self.left.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/left.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left.setIcon(icon2)
        self.left.setIconSize(QtCore.QSize(128, 128))
        self.left.setObjectName("left")
        
        self.right = QtWidgets.QPushButton(self.centralwidget)
        self.right.setGeometry(QtCore.QRect(710, 340, 151, 111))
        self.right.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/right.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.right.setIcon(icon3)
        self.right.setIconSize(QtCore.QSize(128, 128))
        self.right.setObjectName("right")
        
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setGeometry(QtCore.QRect(40, 330, 61, 301))
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.verticalSlider.setMinimum(0)
        self.verticalSlider.setMaximum(140)
        self.verticalSlider.setValue(60)
        self.verticalSlider.setTickPosition(QtWidgets.QSlider.TicksRight)
        self.verticalSlider.setTickInterval(5)
        self.verticalSlider.valueChanged.connect(self.valuechange)

        
        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setGeometry(QtCore.QRect(490, 350, 131, 91))
        self.stop.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/stop.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stop.setIcon(icon4)
        self.stop.setIconSize(QtCore.QSize(128, 128))
        self.stop.setObjectName("stop")
        
        self.left_up = QtWidgets.QPushButton(self.centralwidget)
        self.left_up.setGeometry(QtCore.QRect(300, 190, 140, 120))
        self.left_up.setAutoFillBackground(False)
        self.left_up.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/left_up.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left_up.setIcon(icon5)
        self.left_up.setIconSize(QtCore.QSize(128, 128))
        self.left_up.setObjectName("left_up")
        
        self.right_down = QtWidgets.QPushButton(self.centralwidget)
        self.right_down.setGeometry(QtCore.QRect(670, 480, 140, 120))
        self.right_down.setAutoFillBackground(False)
        self.right_down.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/right_down.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.right_down.setIcon(icon6)
        self.right_down.setIconSize(QtCore.QSize(128, 128))
        self.right_down.setObjectName("right_down")
        
        self.left_down = QtWidgets.QPushButton(self.centralwidget)
        self.left_down.setGeometry(QtCore.QRect(300, 480, 140, 120))
        self.left_down.setAutoFillBackground(False)
        self.left_down.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/left_down.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left_down.setIcon(icon7)
        self.left_down.setIconSize(QtCore.QSize(128, 128))
        self.left_down.setObjectName("left_down")
        
        self.right_up = QtWidgets.QPushButton(self.centralwidget)
        self.right_up.setGeometry(QtCore.QRect(670, 190, 140, 120))
        self.right_up.setAutoFillBackground(False)
        self.right_up.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/right_up.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.right_up.setIcon(icon8)
        self.right_up.setIconSize(QtCore.QSize(128, 128))
        self.right_up.setObjectName("right_up")
        
        self.camera = QtWidgets.QPushButton(self.centralwidget)
        self.camera.setGeometry(QtCore.QRect(919, 20, 151, 101))
        self.camera.setAutoFillBackground(False)
        self.camera.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/camera.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.camera.setIcon(icon9)
        self.camera.setIconSize(QtCore.QSize(128, 128))
        self.camera.setObjectName("camera")
        
        self.car_mode = QtWidgets.QPushButton(self.centralwidget)
        self.car_mode.setGeometry(QtCore.QRect(920, 680, 151, 101))
        self.car_mode.setAutoFillBackground(False)
        self.car_mode.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/car.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.car_mode.setIcon(icon10)
        self.car_mode.setIconSize(QtCore.QSize(128, 128))
        self.car_mode.setObjectName("car_mode")
        
        self.pump = QtWidgets.QPushButton(self.centralwidget)
        self.pump.setGeometry(QtCore.QRect(760, 680, 151, 101))
        self.pump.setAutoFillBackground(False)
        self.pump.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/pump.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pump.setIcon(icon11)
        self.pump.setIconSize(QtCore.QSize(128, 128))
        self.pump.setObjectName("pump")
        
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(40, 630, 61, 31))
        self.lcdNumber.setMidLineWidth(0)
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(4)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcdNumber.setProperty("value", 60.0)
        self.lcdNumber.setObjectName("lcdNumber")
        
        self.reconnect = QtWidgets.QPushButton(self.centralwidget)
        self.reconnect.setGeometry(QtCore.QRect(760, 20, 151, 101))
        self.reconnect.setAutoFillBackground(False)
        self.reconnect.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"grapics/reconnect.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.reconnect.setIcon(icon12)
        self.reconnect.setIconSize(QtCore.QSize(100, 100))
        self.reconnect.setObjectName("reconnect")
        MainWindow.setCentralWidget(self.centralwidget)

        self.up.clicked.connect(self.forward)
        self.down.clicked.connect(self.backward)
        self.left.clicked.connect(self.leftward)
        self.left_up.clicked.connect(self.forward_left)
        self.left_down.clicked.connect(self.backward_left)
        self.right.clicked.connect(self.rightward)
        self.right_down.clicked.connect(self.backward_right)
        self.right_up.clicked.connect(self.forward_right)
        self.stop.clicked.connect(self.allstop)
        self.reconnect.clicked.connect(self.connect_bluetooth)
        self.car_mode.clicked.connect(self.switch_mode)
        self.pump.clicked.connect(self.activate_pump)
        self.camera.clicked.connect(self.activate_camera)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
    def valuechange(self):
        self.size = self.verticalSlider.value()
        self.lcdNumber.display(self.size)
    
    def connect_bluetooth(self):
        # import serial.tools.list_ports
        # for i in list(serial.tools.list_ports.comports()):
        #     print(str(i))
        try:
            # self.serialComm = serial.Serial('COM10', 9600)
            try:
                self.serialComm = serial.Serial('COM6', 9600)
                self.serialComm.open()
                self.serialComm.flush()
                # self.serialComm.reset_input_buffer()
            except serial.serialutil.SerialException:
                self.serialComm.close()
                self.serialComm.open()
                self.serialComm.flush()
                # self.serialComm.reset_input_buffer()
            except AttributeError:
                print("pair HC-05 first")
            print("Established connection successfully")
        except serial.serialutil.SerialException:
            print("No available port")

        
    def forward(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('W').encode())
                print("forward")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        
    def forward_right(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('E').encode())
                print("forward_right")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
    
    def forward_left(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('Q').encode())
                print("forward_left")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
    
    def backward(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('S').encode())
                print("backward")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        
    def backward_right(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('X').encode())
                print("backward_right")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
    
    def backward_left(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('Z').encode())
                print("backward_left")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
    
    def rightward(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('D').encode())
                print("rightward")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        
    def leftward(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('A').encode())
                print("leftward")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        
    def allstop(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('F').encode())
                print("stop")
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        
    def activate_pump(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('P').encode())
                print("pump on")
                self.connect_bluetooth()
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
                
    def activate_camera(self):
        try:
            with open("camera_ip.txt", 'r') as f:
                line = f.readline()
                webbrowser.open('{}'.format(line), new = 2)
            print("camera on")
        except AttributeError:
            print("Not connected to the car")
        except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()

    def switch_mode(self):
        if self.mode == "M":
            try:
                self.serialComm.write(str('I').encode())
                self.mode = 'I'
                print("switching car mode to Autonomous > {}".format(self.mode))
                self.car_mode.setIcon(QtGui.QIcon(os.path.join(os.getcwd(),"grapics/autonomous.png")))
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()
        elif self.mode == "I":
            try:
                self.serialComm.write(str('M').encode())
                self.mode = 'M'
                print("switching car mode to manual> {}".format(self.mode))
                self.car_mode.setIcon(QtGui.QIcon(os.path.join(os.getcwd(),"grapics/car.png")))
                # icon10.addPixmap(QtGui.QPixmap(os.path.join(os.getcwd(),"car.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            except AttributeError:
                print("Not connected to the car")
            except serial.serialutil.PortNotOpenError:
                self.connect_bluetooth()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ROVER"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
